#!/usr/bin/env bash

TEST_OUTPUT=/tmp/test_output.$$

print_success() { echo -n .; }
print_failure() { echo -n x; }
print_pending() { echo -n p; }
print_output()  { echo; cat $TEST_OUTPUT/*; }
run_test() { diff <( go run "$1" 2>&1) "$2" > /dev/null; }

record_failure() {
  {
    echo "Failed: $1"
    echo "  To reset, run:"
    echo "  rm $2"
    diff -yW200 <( go run "$1" 2>&1) "$2"
    echo "------------------------"
    echo
  } >> "$TEST_OUTPUT/${1//\//_}.out"
}

generate_expected() {
  echo
  echo "$2 not found - generating it..."
  go run "$1" > "$2"
}

generate_escaped() {
  sed 's/&(?!amp;)/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g' < "$1" > "$1.escaped"
}

process_file() {
  file=$1
  expected=${file/.go/.expected}

  if [ -s "$file" ]; then
    if [ -f "$expected" ]; then
      if run_test "$file" "$expected"; then
        print_success
      else
        record_failure "$file" "$expected"
        print_failure
      fi
    else
      generate_expected "$file" "$expected"
    fi
  else
    print_pending
  fi
  generate_escaped "$expected"
  generate_escaped "$file"
}

main() {
  mkdir $TEST_OUTPUT
  touch $TEST_OUTPUT/cat_on_empty_dir_hangs

  if [[ "$#" -gt 0 ]]; then
    shopt -s nullglob
    files=( "$@" )
  else
    readarray -t files < <(find chapters -name "test*.go")
  fi

  echo "Running tests for ${files[*]}"

  for file in "${files[@]}"; do
    process_file "$file" &
  done

  wait

  print_output

  rm -rf $TEST_OUTPUT
}

main "$@"
